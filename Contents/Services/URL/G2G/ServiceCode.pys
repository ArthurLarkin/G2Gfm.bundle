######################################################################################

BASE_URL = 'http://g2g.fm'
ICON_COVER = "icon-cover.png"
RE_VIDEOURL = Regex('(?<=u003d)(https.*?)(?=https)')
RE_GENRE = Regex('(?<=Genre: )(.*?)(?= Rating)')
RE_RATING = Regex('(?<=Rating: )(.*?)(?=\/)')
RE_DATE = Regex('(?<=Date: )(.*)')
RE_DIRECTOR = Regex('(?<=Director: )(.*)')
RE_SUMMARY = Regex("(?<=Synopsis: )(.*)")
RE_RESOLUTION = Regex("(?<=Resolution: )(.*)")


######################################################################################
# Loads metadata from ep_url and returns VideoClipObject 

def MetadataObjectForURL(url):
	
	page_data = HTML.ElementFromURL(url)
	string_data = ''.join(page_data.xpath("//blockquote//text()")).strip()
	show_title = page_data.xpath("//title/text()")[0].rsplit(" Streaming",1)[0].rsplit(" Download",1)[0]
	show_thumb = page_data.xpath("//blockquote[@class='postcontent restore']/div/img/@src")[0]
	try:
		show_genres = RE_GENRE.search(string_data).group().split(" | ")
	except:
		show_genres = []
	try:
		show_rating = float(RE_RATING.search(string_data).group())
	except:
		show_rating = 0.0
	try:
		show_date = int(RE_DATE.search(string_data).group().split(",")[1])
	except:
		show_date = 0
	try:
		show_director = RE_DIRECTOR.search(string_data).group().split(", ")
	except:
		show_director = []
	try:
		show_summary = RE_SUMMARY.search(string_data).group()
	except:
		show_summary = "Watch " + show_title + " in HD now from G2G.fm!"
	
	return MovieObject(
		title = show_title,
		genres = show_genres,
		rating = show_rating,
		year = show_date,
		directors = show_director,
		summary = show_summary,
		thumb = show_thumb
		)

######################################################################################
# Sets up and sends a request for the video iframe link before passing to PlayVideo

def MediaObjectsForURL(url):

	return[
		MediaObject(
			optimized_for_streaming = True,
			container = Container.MP4,
			video_resolution = 720,
			audio_channels = 2,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			parts = [PartObject(key=Callback(PlayVideo, url = url))]
			)
		]

######################################################################################
# Checks the iframe url for a service we know how to handle, if found returns video link

@indirect
def PlayVideo(url):

	page_data = HTML.ElementFromURL(url)
	first_frame = HTML.ElementFromString(HTTP.Request(page_data.xpath("//blockquote/div/iframe/@src")[0], headers={'referer':url}))
	second_frame = HTML.ElementFromString(HTTP.Request(first_frame.xpath("//iframe/@src")[0], headers={'referer':url}))
	final_frame = HTML.ElementFromString(HTTP.Request(second_frame.xpath("//iframe/@src")[0], headers={'referer':url}))
	string_data = HTML.StringFromElement(final_frame)
	video_url = RE_VIDEOURL.search(string_data).group()
	url = String.Unquote(video_url, usePlus=False)
	return IndirectResponse(VideoClipObject, key=url)
